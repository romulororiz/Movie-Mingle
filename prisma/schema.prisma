// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  bookmarkedMovies   Bookmark[]
  UserPreference     UserPreference?
  UserPreferredGenre UserPreferredGenre[]
}

// one to one relation to user
model UserPreference {
  id        String               @id @default(cuid())
  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  minYear   Int?
  maxYear   Int?
  minRating Float?
  maxRating Float?
  genres    UserPreferredGenre[]

  @@unique([userId])
}

model UserPreferredGenre {
  id               String          @id @default(cuid())
  userId           String
  genreId          Int
  name             String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?

  @@unique([userId, genreId])
}

model Bookmark {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  userId        String
  movieId       String
  title         String
  overview      String
  posterPath    String?
  backdropPath  String?
  originalLang  String
  releaseDate   DateTime
  voteAverage   Float
  originalTitle String
  user          User            @relation(fields: [userId], references: [id])
  genres        BookmarkGenre[]

  @@unique([movieId, userId])
}

model BookmarkGenre {
  id         String   @id @default(cuid())
  genreId    Int
  name       String
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId String

  @@index([bookmarkId])
}
